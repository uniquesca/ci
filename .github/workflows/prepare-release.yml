name: Prepare release

on:
  workflow_call:
    secrets:
      UNIQUES_GITHUB_ACCESS_TOKEN:
        description: 'Access token for cloning Uniques private repositories from GitHub'
        required: true
      NODE_AUTH_TOKEN:
        description: 'Access token for authentication with the NPM registry'
        required: false
    inputs:
      version:
        description: 'Version being prepared, has to be in x.y.z format'
        required: true
        type: string
      generate_changelog:
        description: 'Whether changelog should be generated for the new version'
        required: false
        default: true
        type: boolean
      changelog_path:
        description: 'Path to the changelog file. Ignored if `generate-changelog` input is not set to `true`'
        required: false
        default: 'CHANGELOG.md'
        type: string
      use_db:
        description: 'Whether DB should be set up'
        required: false
        default: false
        type: boolean
      update_db:
        description: 'Whether DB dump should be updated'
        required: false
        default: false
        type: boolean
      sql_command:
        description: 'SQL to run before exporting DB - usually for cleanup'
        required: false
        type: string
      mysql_version:
        description: 'Version of MySQL to set up'
        required: false
        default: "8.0"
        type: string
      mysql_config:
        description: 'MySQL config to apply (syntax similar to my.cnf)'
        required: false
        default: ""
        type: string
      db_dump_path:
        description: 'Path to the DB dump. Ignored if `update_db` input is not set to `true`'
        required: false
        type: string
      migration_command:
        description: 'DB migration command to run. Ignored if `update_db` input is not set to `true`'
        required: false
        default: './vendor/bin/phinx migrate'
        type: string
      pre_cmd:
        description: 'Additional command(s) to run before release preparation happens'
        required: false
        default: ''
        type: string
      post_cmd:
        description: 'Additional command(s) to run after release preparation happens (but before git commit)'
        required: false
        default: ''
        type: string
      node_version:
        description: 'Node version to use during release preparation'
        required: false
        default: 20
        type: number
      env_variables:
        description: 'JSON string representing an object with environment variables to set up an environment'
        required: false
        default: '{}'
        type: string
      generate_coverage_badge:
        description: 'Whether a unit test coverage badge needs to be generated and committed'
        required: false
        default: true
        type: boolean
      coverage_badge_file:
        description: 'Path to a coverage badge file - ignored if `generate_coverage_badge` is not set to `true`'
        required: false
        default: 'coverage.svg'
        type: string

jobs:
  get-environment:
    name: Get environment info
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env.outputs.env }}
    steps:
      - uses: actions/checkout@v4
      - id: env
        uses: uniquesca/ci/get-default-ci-environment@main

  prepare-release:
    name: Prepare release
    needs: [ get-environment ]
    strategy:
      matrix:
        env: ${{ fromJSON(needs.get-environment.outputs.env) }}
    runs-on: ${{ matrix.env.os }}
    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.php.version }}
          extensions: ${{ matrix.env.php.extensions }}
          ini-values: xdebug.mode="coverage"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Run pre command
        run: ${{ inputs.pre_cmd }}

      - name: Check if composer.json exists
        id: check-composer
        run: |
          if [ -f "composer.json" ]; then
            echo "composer.json file exists â€” will inject version."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if we have PHPUnit
        run: |
          if [[ -f "phpunit.xml" ]] || [[ -f "phpunit.xml.dist" ]]; then
            echo "phpunit=1" >> $GITHUB_ENV
          else
            echo "No PHPUnit configuration file found, skipping tests."
          fi

      - name: Prepare environment variables
        if: env.phpunit == 1
        id: merge_environment_vars
        uses: uniquesca/ci/merge-environment-variables@main
        with:
          variables1: ${{ inputs.env_variables }}
          variables2: '{"db.name":"prepare_release","db.username":"root","db.password":"root","db.host":"127.0.0.1","db.port":"3306"}'

      - name: Set up PHPUnit environment file
        if: env.phpunit == 1
        uses: uniquesca/ci/prepare-environment@main
        with:
          env_file: "phpunit.xml"
          env_file_stub: "phpunit.xml.dist"
          env_variables: ${{ steps.merge_environment_vars.outputs.variables }}

      - name: Set up default environment file
        if: env.phpunit == 1
        uses: uniquesca/ci/prepare-environment@main
        with:
          env_variables: ${{ steps.merge_environment_vars.outputs.variables }}

      - name: Install dependencies
        uses: uniquesca/ci/install-packages@main
        with:
          access_token: ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}

      - name: Set up MySQL
        if: inputs.use_db || inputs.update_db
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: ${{ inputs.mysql_version }}
          my-cnf: ${{ inputs.mysql_config }}
          root-password: 'root'
          auto-start: true

      - name: Start MySQL and create a database
        if: inputs.use_db || inputs.update_db
        shell: bash
        run: mysql -u root -proot --execute="CREATE DATABASE prepare_release;"

      - name: Import DB
        if: inputs.use_db || inputs.update_db
        uses: uniquesca/ci/mysql-import@main
        with:
          dump_file_path: ${{ inputs.db_dump_path }}
          db_name: prepare_release

      - name: Run DB migration
        if: inputs.use_db || inputs.update_db
        run: ${{ inputs.migration_command }}

      - name: Run SQL
        if: inputs.update_db && inputs.sql_command
        run: |
          mysql -u root -proot -D prepare_release --execute="${{ inputs.sql_command }}"

      - name: Export DB dump
        if: inputs.update_db
        uses: uniquesca/ci/mysql-export@main
        with:
          dump_file_path: ${{ inputs.db_dump_path }}
          db_name: prepare_release

      - name: Set Composer version in composer.json
        if: ${{ steps.check-composer.outputs.exists == 'true' }}
        working-directory: ${{ inputs.working_directory }}
        shell: bash
        run: |
          composer_version="${{ inputs.version }}"
          echo "Setting version in composer.json to $composer_version"

          if jq -e '.version' composer.json > /dev/null; then
            echo "Version found in composer.json. Updating version."
            jq --arg version "$composer_version" '.version = $version' composer.json > composer.tmp.json && mv composer.tmp.json composer.json
          else
            echo '"version" not found in composer.json. Adding version field'
            jq --arg version "$composer_version" '. + {version: $version}' composer.json > composer.tmp.json && mv composer.tmp.json composer.json
          fi

      - name: Update changelog file
        if: ${{ inputs.generate_changelog == true }}
        uses: uniquesca/ci/update-changelog@main
        with:
          changelog_path: ${{ inputs.changelog_path }}
          target_version: ${{ inputs.version }}

      - name: Run PHPUnit
        if: env.phpunit == 1
        run: php ./vendor/bin/phpunit --configuration phpunit.xml

      - name: Generate coverage badge
        if: ${{ env.phpunit == 1 && inputs.generate_coverage_badge == true }}
        uses: timkrase/phpunit-coverage-badge@v1.2.1
        with:
          coverage_badge_path: ${{ inputs.coverage_badge_file }}
          push_badge: false

      - name: Update package version
        run: |
          if [ -f "package.json" ]; then
            npm pkg set version=${{ inputs.version }}
          fi

      - name: Run additional release preparation comand
        run: ${{ inputs.post_cmd }}

      - name: Commit changes
        run: |
          git config --local user.email "service@uniques.ca"
          git config --local user.name "CI"

          if [ -f "package.json" ]; then
            git add package.json
          fi

          if [ -f "composer.json" ]; then
            git add composer.json
          fi

          if ${{ inputs.update_db == true }}; then
            git add ${{ inputs.db_dump_path }}
          fi
          
          if ${{ inputs.generate_changelog == true }}; then
            git add CHANGELOG.md
          fi
          
          if ${{ inputs.generate_coverage_badge == true }}; then
            git add ${{ inputs.coverage_badge_file }}
          fi
          
          git clean -fd
          
          git diff --staged --quiet || (git commit -m "CI: automatic commit for the new release: #${GITHUB_SHA} [skip ci]" && git push)
