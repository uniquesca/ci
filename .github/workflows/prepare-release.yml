name: Prepare release

on:
  workflow_call:
    secrets:
      UNIQUES_GITHUB_ACCESS_TOKEN:
        description: 'Access token for cloning Uniques private repositories from GitHub'
        required: true
      NODE_AUTH_TOKEN:
        description: 'Access token for authentication with the NPM registry'
        required: false
    inputs:
      version:
        description: 'Version being prepared, has to be in x.y.z format'
        required: true
        type: string
      generate_changelog:
        description: 'Whether changelog should be generated for the new version'
        required: false
        default: true
        type: boolean
      changelog_path:
        description: 'Path to the changelog file. Ignored if `generate-changelog` input is not set to `true`'
        required: false
        default: 'CHANGELOG.md'
        type: string
      update_db:
        description: 'Whether DB dump should be updated'
        required: false
        default: false
        type: boolean
      mysql_version:
        description: 'Version of MySQL to set up'
        required: false
        default: "8.0"
        type: string
      mysql_config:
        description: 'MySQL config to apply (syntax similar to my.cnf)'
        required: false
        default: false
        type: string
      db_dump_path:
        description: 'Path to the DB dump. Ignored if `update_db` input is not set to `true`'
        required: false
        type: string
      migration_command:
        description: 'DB migration command to run. Ignored if `update_db` input is not set to `true`'
        required: false
        default: './vendor/bin/phinx migrate'
        type: string
      build_command:
        description: 'Allows to perform a build as part of release preparation'
        required: false
        type: string
        default: ''
      build_path:
        description: 'Allows to specify path to the build files for committing them'
        required: false
        type: string
        default: ''

jobs:
  get-environment:
    name: Get environment info
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env.outputs.env }}
    steps:
      - uses: actions/checkout@v3
      - id: env
        uses: uniquesca/ci/get-default-ci-environment@main

  prepare-release:
    needs: [ get-environment ]
    strategy:
      matrix:
        env: ${{ fromJSON(needs.get-environment.outputs.env) }}
    runs-on: ${{ matrix.env.os }}
    env:
      npm: 0
    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.php.version }}
          extensions: ${{ matrix.env.php.extensions }}
          ini-values: xdebug.mode="coverage"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Update package version
        run: |
          if [ -f "package.json" ]; then
            npm pkg set version=${{ inputs.version }}
          fi

      - name: Update changelog file
        if: ${{ inputs.generate_changelog == true }}
        uses: uniquesca/ci/update-changelog@main
        with:
          changelog_path: ${{ inputs.changelog_path }}
          target_version: ${{ inputs.version }}

      - name: Install Composer dependencies
        run: |
          if [ -f "composer.json" ]; then
            composer config --auth github-oauth.github.com ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}
            composer install
          fi

      - name: Set up MySQL
        if: inputs.update_db == true
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: ${{ inputs.mysql_version }}
          my-cnf: ${{ inputs.mysql_config }}

      - name: Migrate DB dump
        if: ${{ inputs.update_db == true }}
        uses: uniquesca/ci/migrate-db-dump@main
        with:
          db_dump_path: ${{ inputs.db_dump_path }}
          migration_command: ${{ inputs.migration_command }}

      - name: Debug DB dump
        if: ${{ inputs.update_db == true }}
        run: cat ${{ inputs.db_dump_path }}

      - name: Version bump if possible
        run: |
          if [ -f "officio.phar" ]; then
            chmod +x officio.phar
            ./officio.phar bump_version ${{ inputs.version }}
          fi

      - name: Update package version
        if: env.npm == 1
        run: |
          npm pkg set version=${{ inputs.version }}

      - name: Check if we have NPM/Yarn to install
        run: |
          if [[ -f "package.json" ]]; then
            echo "npm=1" >> $GITHUB_ENV
          else
            echo "No NPM/Yarn found, skipping JS/TS-related QA."
          fi

      - name: Install NPM/Yarn dependencies
        if: env.npm == 1
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          if [ ! -f ".npmrc" ]; then
            echo "@uniquesca:registry=https://npm.pkg.github.com/" >> .npmrc
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> .npmrc
            cat .npmrc
          fi
          
          # This is a hack because otherwise Yarn can't just download private packages =/
          if [ -f "yarn.lock" ]; then
            rm yarn.lock
          fi
          
          if [ -f ".yarnrc" ]; then
            yarn install --verbose
          else
            npm install  
          fi

      - name: Run Build
        run: ${{ inputs.build_command }}

      - name: Add build files to Git index
        if: ${{ inputs.build_path != '' }}
        run: git add ${{ inputs.build_path }}

      - name: Commit changes
        run: |
          git config --local user.email "gha@uniques.ca"
          git config --local user.name "GitHub Actions"

          if [ -f "package.json" ]; then
            git add package.json
          fi
          
          if ${{ inputs.update_db == true }}; then
            git add ${{ inputs.db_dump_path }}
          fi
          
          if ${{ inputs.generate_changelog == true }}; then
            git add CHANGELOG.md
          fi
          
          git clean -fd
          
          git diff --staged --quiet || (git commit -a -m "Automatic commit for the new release: #${GITHUB_SHA}" && git push)
