name: Deploy

on:
  workflow_call:
    secrets:
      SSH_KEY:
        description: 'SSH private key to use to connect to the host'
        required: true
      UNIQUES_GITHUB_ACCESS_TOKEN:
        description: 'Access token for cloning Uniques private repositories from GitHub'
        required: true
      NODE_AUTH_TOKEN:
        description: 'Access token for authentication with the NPM registry'
        required: false
    inputs:
      host:
        description: 'Address of the server'
        required: true
        type: string
      username:
        description: 'SSH login'
        required: true
        type: string
      port:
        description: 'SSH password'
        required: false
        default: '22'
        type: string
      deployment_path:
        description: 'Working directory of the project on the server'
        required: true
        type: string
      ref:
        description: 'Git branch or tag to use for the project on the server'
        required: true
        type: string
      docker_up_args:
        description: 'Arguments to pass to docker up command'
        required: false
        type: string
        default: '--force-recreate'
      post_cmd:
        description: 'Command to execute after deployment is complete'
        required: false
        default: ''
        type: string

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Connect and deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ inputs.port }}
          script_stop: false
          script: |
            # Making it more strict for the script to fail in case of an error
            set -eux;
            
            echo "Changing work dir"
            cd ${{ inputs.deployment_path }}
            
            echo "Cleaning git"
            git clean -fd
            
            echo "Pruning git"
            git remote prune origin
            
            echo "Retrieving the latest updates"
            git fetch

            # This part is commented because it doesn't work well - if there are any changes done, 
            # or some commits are ahead autodeployment will fail
            # if git show-ref -q --verify "refs/heads/${{ inputs.ref }}" 2>/dev/null; then
            #   echo "Branch detected, switching and pulling"
            #   git checkout ${{ inputs.ref }}
            #   git pull
            # else
            #   echo "Non-branch detected, performing get reset"
            
            echo "Checking if it's a pull request"
            ref="${{ inputs.ref }}"
            if [[ ${{ inputs.ref }} =~ ^refs/pull/[0-9]+/merge$ ]]; then
              echo "Pull request detected"
              # Handling pull requests
              echo "Performing hard reset"
              git reset --hard
              echo "Switching to PR branch with detached HEAD"
              git fetch -u origin pull/${{ github.event.pull_request.number }}/head && git checkout FETCH_HEAD
            else
              echo "Pull request not detected"
              echo "Checking if remote branch exists"
              # This is just regular branch
              branch_exists="$(git ls-remote --heads origin $ref | wc -l)"

              if [[ branch_exists > 0 ]]; then
                echo "Remote branch ${{ inputs.ref }} exists, performing hard reset to it"
                git reset --hard origin/${{ inputs.ref }}
              else
                echo "Remote branch ${{ inputs.ref }} not found, performing hard reset"
                git reset --hard ${{ inputs.ref }}
              fi
            fi
            
            # TODO Add compatibility with `docker compose` as well

            # Rebuild docker image
            echo "Rebuilding Docker image"
            ./task.sh build
            
            echo "Stopping Docker Services"
            ./task.sh down
            
            echo "Starting Docker Services"
            ./task.sh up -d ${{ inputs.docker_up_args }}
            
            if [ -f "composer.json" ]; then
              echo "Installing composer dependencies"
              ./task.sh composer config --auth github-oauth.github.com ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}
              ./task.sh composer install --no-dev
            fi
            
            if [ -f "package.json" ]; then
              echo "Preparing .npmrc file"
              echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
              echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> .npmrc
              echo "always-auth=true" >> .npmrc
            
              if [ -f "yarn.lock" ]; then
                echo "Installing Yarn"
                ./task.sh yarn install
              else 
                echo "Installing NPM"
                ./task.sh npm install
              fi
            fi
            
            echo "Running migrations"
            ./task.sh migrate

            echo "Clearing cache"
            ./task.sh clear-cache
            
            echo "Executing post-deployment command"
            ${{ inputs.post_cmd }}
