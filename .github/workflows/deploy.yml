name: Deploy

on:
  workflow_call:
    secrets:
      SSH_KEY:
        description: 'SSH private key to use to connect to the host'
        required: true
      UNIQUES_GITHUB_ACCESS_TOKEN:
        description: 'Access token for cloning Uniques private repositories from GitHub'
        required: true
      NODE_AUTH_TOKEN:
        description: 'Access token for authentication with the NPM registry'
        required: false
    inputs:
      host:
        description: 'Address of the server'
        required: true
        type: string
      username:
        description: 'SSH login'
        required: true
        type: string
      port:
        description: 'SSH password'
        required: false
        default: '22'
        type: string
      deployment_path:
        description: 'Working directory of the project on the server'
        required: true
        type: string
      ref:
        description: 'Git branch or tag to use for the project on the server'
        required: true
        type: string
      db_migration_cmd:
        description: 'DB migration command to execute after git update is complete'
        required: false
        default: ''
        type: string
      clean_cache_cmd:
        description: 'Command for clearing cache to execute after git update is complete'
        required: false
        default: ''
        type: string
      post_cmd:
        description: 'Command to execute after deployment is complete'
        required: false
        default: ''
        type: string
      node_version:
        description: 'Node version to use when deploying'
        required: false
        default: '20'
        type: string

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Connect to Deploy Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ inputs.port }}
          script_stop: true
          script: |
            echo "Changing work dir"
            cd ${{ inputs.deployment_path }}
            
            echo "Cleaning git"
            git clean -fd
            git fetch -u

            # This part is commented because it doesn't work well - if there are any changes done, 
            # or some commits are ahead autodeployment will fail
            # if git show-ref -q --verify "refs/heads/${{ inputs.ref }}" 2>/dev/null; then
            #   echo "Branch detected, switching and pulling"
            #   git checkout ${{ inputs.ref }}
            #   git pull
            # else
            #   echo "Non-branch detected, performing get reset"
            ref="${{ inputs.ref }}"
            if [[ "$ref" =~ ^refs/pull/[0-9]+/merge$ ]]; then
              # Handling pull requests
              git reset --hard
              git fetch origin pull/${{ github.event.number }}/head:pr${{ github.event.number }}
              git switch pr${{ github.event.number }}
            else
              # This is just regular branch
              branch_exists = "$(git ls-remote --heads origin $ref | wc -l)"

              if [[ branch_exists > 0 ]]; then
                git reset --hard origin/${{ inputs.ref }}
              else
                git reset --hard ${{ inputs.ref }}
              fi
            fi
            
            # Improve steps here to make it possible to install things, not just update
            # mysql -u root -p root -e "CREATE DATABASE IF NOT EXISTS officio.forms;"
            
            if [ -f "composer.json" ]; then
              echo "Installing composer dependencies"
              if [ ! -f "composer.phar" ]; then
                echo "Installing Composer"
                php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
                php composer-setup.php
                php -r "unlink('composer-setup.php');"
              fi
              echo "Installing Composer dependencies"
              chmod +x composer.phar
              php composer.phar config --auth github-oauth.github.com ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}
              php composer.phar install --no-dev
            fi
            
            if [ -f "package.json" ]; then
              echo "Preparing .npmrc file"
              echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
              echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> .npmrc
              echo "always-auth=true" >> .npmrc
            
              export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
              if ! command -v nvm &> /dev/null; then
                echo "Installing NVM"
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
                export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
                [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
                echo "  Using node v${{ inputs.node_version }}"
                nvm install ${{ inputs.node_version }}
              fi

              nvm use ${{ inputs.node_version }}
              if ! command -v yarn &> /dev/null; then
                echo "Installing Yarn"
                (r=2;while ! npm install -g yarn ; do ((--r))||exit;sleep 5;done)
              fi

              echo "Installing NPM/Yarn dependencies"
              # Commands below run yarn in a way it doesn't emit non-zero exit code, so we don't stop,
              # yet we capture stderr, so we can check it
              output=$(yarn install 2>&1 || true)
              echo "$output"
              # Check for "401 Unauthorized" in stderr - this is a workaround for the intermittent bug 
              # with yarn authentication
              if echo "$output" | grep -q "401 Unauthorized"; then
                echo "Could not install yarn dependencies, retrying..."
                echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
                echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> .npmrc
                echo "always-auth=true" >> .npmrc
                rm yarn.lock
                npm cache clean --force
                yarn cache clean 
                echo "Deleted yarn.lock, running yarn install again..."
                yarn install
              fi
            fi

            if [ -f "vendor/bin/phinx" ]; then
              echo "Executing Phinx migrations"
              if [ -f "phinx.php" ]; then
                chmod +x ./vendor/bin/phinx
                chmod +x ./vendor/robmorgan/phinx/bin/phinx
                ./vendor/bin/phinx migrate -c phinx.php
                break
              fi
            fi
            
            echo "Executing DB migration command"
            ${{ inputs.db_migration_cmd }}
            
            echo "Executing cache cleaning command"
            ${{ inputs.clean_cache_cmd }}
            
            echo "Executing post-deployment command"
            ${{ inputs.post_cmd }}
