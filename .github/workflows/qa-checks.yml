name: QA Checks

on:
  workflow_call:
    secrets:
      UNIQUES_GITHUB_ACCESS_TOKEN:
        description: 'Access token for cloning Uniques private repositories from GitHub'
        required: true
      NODE_AUTH_TOKEN:
        description: 'Access token for authentication with the NPM registry'
        required: false
    inputs:
      setup_cmd:
        description: 'Command to run to set up environment before the QA checks execution'
        required: false
        default: ''
        type: string
      use_db:
        description: 'Whether a database is needed (for example for unit tests)'
        required: false
        default: false
        type: boolean
      mysql_version:
        description: 'Version of MySQL to set up'
        required: false
        default: "8.0"
        type: string
      mysql_config:
        description: 'MySQL config to apply (syntax similar to my.cnf)'
        required: false
        default: false
        type: string
      db_dump_path:
        description: 'Path to the DB dump file - ignored if `use_db` is not set to `true`'
        required: false
        type: string
      db_migration_cmd:
        description: 'Migration cmd for the DB - will execute before running unit tests'
        required: false
        type: string
        default: ''
      generate_coverage_badge:
        description: 'Whether a unit test coverage badge needs to be generated and committed'
        required: false
        default: true
        type: boolean
      coverage_badge_file:
        description: 'Path to a coverage badge file - ignored if `generate_coverage_badge` is not set to `true`'
        required: false
        default: 'coverage.svg'
        type: string
      env_variables:
        description: 'JSON string representing an object with environment variables to set up an environment'
        required: false
        default: '{}'
        type: string

jobs:
  matrix:
    name: Get CI job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3

      - id: matrix
        uses: uniquesca/ci/prepare-ci-matrix@main

  qa:
    name: Run QA checks
    needs: [ matrix ]
    runs-on: ${{ matrix.setup.os }}
    env:
      phpunit: 0
      composer: 0
      npm: 0
    strategy:
      fail-fast: false
      matrix:
        setup: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    steps:
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.setup.php.version }}
          extensions: ${{ matrix.setup.php.extensions }}
          ini-values: xdebug.mode="coverage"

      - uses: actions/checkout@v3

      - name: Check if we have Composer to install
        run: |
          if [[ -f "composer.json" ]]; then
            echo "composer=1" >> $GITHUB_ENV
          else
            echo "No Composer found, skipping php-related QA."
          fi

      - name: Cache Composer dependencies
        if: env.composer == 1
        id: cache-composer
        uses: actions/cache@v3
        with:
          path: |
            vendor
          key: ${{ runner.os }}-${{ matrix.setup.php.version }}-composer-ci-qa-checks-${{ hashFiles('composer.json','composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.setup.php.version }}-composer-

      - name: Install Composer dependencies (Composer-locked environment)
        if: env.composer == 1 && steps.cache-composer.outputs.cache-hit != 'true' && matrix.setup.locked == true
        run: |
          composer config --auth github-oauth.github.com ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}
          composer install

      - name: Update Composer dependencies (not Composer-locked environment)
        if: env.composer == 1 && steps.cache-composer.outputs.cache-hit != 'true' && matrix.setup.locked != true
        run: |
          composer config --auth github-oauth.github.com ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}
          composer update

      - name: Check if we have PHPUnit
        run: |
          if [[ -f "phpunit.xml" ]] || [[ -f "phpunit.xml.dist" ]]; then
            echo "phpunit=1" >> $GITHUB_ENV
          else
            echo "No PHPUnit configuration file found, skipping tests."
          fi

      - name: Set up MySQL
        if: inputs.use_db == true && env.phpunit == 1
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: ${{ inputs.mysql_version }}
          my-cnf: ${{ inputs.mysql_config }}
          root-password: 'root'
          auto-start: true

      - name: Start MySQL and create a database
        if: inputs.use_db == true && env.phpunit == 1
        run: mysql -uroot -proot -h127.0.0.1 -e 'CREATE DATABASE phpunit;'

      - name: Import database dump
        if: inputs.use_db == true && env.phpunit == 1
        uses: uniquesca/ci/mysql-import@main
        with:
          dump_file_path: ${{ inputs.db_dump_path }}
          db_name: 'phpunit'

      - name: Run setup cmd (if specified)
        run: ${{ inputs.setup_cmd }}

      - name: Prepare environment variables
        if: env.phpunit == 1
        id: merge_environment_vars
        uses: uniquesca/ci/merge-environment-variables@main
        with:
          variables1: ${{ inputs.env_variables }}
          variables2: '{"db.name":"phpunit","db.username":"root","db.password":"root","db.host":"127.0.0.1","db.port":"3306"}'

      - name: Set up PHPUnit environment file
        if: env.phpunit == 1
        uses: uniquesca/ci/prepare-environment@main
        with:
          env_file: "phpunit.xml"
          env_file_stub: "phpunit.xml.dist"
          env_variables: ${{ steps.merge_environment_vars.outputs.variables }}

      - name: Set up default environment file
        if: env.phpunit == 1
        uses: uniquesca/ci/prepare-environment@main
        with:
          env_variables: ${{ steps.merge_environment_vars.outputs.variables }}

      - name: Run DB migration
        if: inputs.use_db == true && env.phpunit == 1
        run: ${{ inputs.db_migration_cmd }}

      - name: Run PHPUnit
        if: env.phpunit == 1
        run: php ./vendor/bin/phpunit --configuration phpunit.xml

      - name: Generate coverage badge
        if: ${{ env.phpunit == 1 && github.event_name == 'pull_request' && inputs.generate_coverage_badge == true }}
        uses: timkrase/phpunit-coverage-badge@v1.2.1
        with:
          coverage_badge_path: ${{ inputs.coverage_badge_file }}
          push_badge: true
          repo_token: ${{ secrets.UNIQUES_GITHUB_ACCESS_TOKEN }}

      - name: Run PHP Codesniffer
        run: |
          if [ -f "phpcs.xml" ]; then
            ./vendor/bin/phpcs
          else
            echo "No PHP_Codesniffer configuration file found, skipping code check."
          fi

      - name: Run Psalm
        run: |
          if [ -f "psalm.xml" ]; then
            ./vendor/bin/psalm --show-info=true
          else
            echo "No Psalm configuration file found, skipping code check."
          fi

      - name: Check if we have NPM/Yarn to install
        run: |
          if [[ -f "package.json" ]]; then
            echo "npm=1" >> $GITHUB_ENV
          else
            echo "No NPM/Yarn found, skipping JS/TS-related QA."
          fi

      - name: Get NPM/Yarn cache directory
        if: env.npm == 1
        id: npm-cache-dir
        shell: bash
        run: |
          if [ -f ".yarnrc" ]; then
            echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}
          else
            echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
          fi

      - name: Cache NPM/Yarn dependencies
        if: env.npm == 1
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-ci-qa-checks-npm-${{ hashFiles('package.json','package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-ci-qa-checks-npm-

      - name: Install NPM/Yarn dependencies
        if: env.npm == 1 && steps.cache-npm.outputs.cache-hit != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          if [ ! -f ".npmrc" ]; then
            echo "@uniquesca:registry=https://npm.pkg.github.com/" >> .npmrc
            echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" >> .npmrc
            cat .npmrc
          fi
          
          # This is a hack because otherwise Yarn can't just download private packages =/
          if [ -f "yarn.lock" ]; then
            rm yarn.lock
          fi
          
          if [ -f ".yarnrc" ]; then
            yarn install
          else
            npm install  
          fi

      - name: Run ESLint
        if: env.npm == 1
        run: |
          if [ -f ".eslintrc.json" ]; then
            npm run cs-check
          else
            echo "No ESLint configuration file found, skipping code check."
          fi
