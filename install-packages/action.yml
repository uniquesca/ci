name: Install packages (Composer/Yarn/NPM)

inputs:
  access_token:
    description: 'GitHub access token with the access to read from repositories'
    required: false
  working_directory:
    description: 'Working directory to install packages in'
    required: false
    default: '.'
  skip_composer:
    description: 'Skip Composer installation'
    required: false
    default: false
  composer_cmd:
    description: 'Command to install or update Composer'
    required: false
    default: "composer install --no-scripts"
  composer_lock:
    description: 'Path to composer.lock file - allows to use alternative ones'
    required: false
    default: 'composer.lock'
  composer_cache_dir:
    description: 'Composer cache directory'
    required: false
    default: false
  skip_npm_yarn:
    description: 'Skip NPM/Yarn installation'
    required: false
    default: false
  npm_cache_dir:
    description: 'NPM cache directory'
    required: false
    default: false
  npm_install_cmd:
    description: 'Command to install NPM'
    required: false
    default: "npm install"
  yarn_cache_dir:
    description: 'Yarn cache directory'
    required: false
    default: false
  yarn_install_cmd:
    description: 'Command to install Yarn'
    required: false
    default: "yarn install --production=false"
  cache_key:
    description: 'Cache key fraction to add to make cache unique'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set up variables
      id: vars
      shell: bash
      run: |
        echo "composer_cache_dir=${{ inputs.composer_cache_dir }}" >> $GITHUB_OUTPUT
        echo "composer_cmd=${{ inputs.composer_cmd }}" >> $GITHUB_OUTPUT
        echo "npm_install_cmd=${{ inputs.npm_install_cmd }}" >> $GITHUB_OUTPUT
        echo "npm_update_cmd=${{ inputs.npm_update_cmd }}" >> $GITHUB_OUTPUT
        echo "yarn_install_cmd=${{ inputs.yarn_install_cmd }}" >> $GITHUB_OUTPUT

    - name: Check if we have Composer to install
      shell: bash
      id: composer
      if: inputs.skip_composer != 'true'
      working-directory: ${{ inputs.working_directory }}
      run: |
        if [[ -f "composer.json" ]]; then
          echo "detected=1" >> $GITHUB_OUTPUT
        else
          echo "No Composer found, skipping."
        fi

    - name: Get Composer Cache Directory
      shell: bash
      id: composer_cache_dir
      if: steps.composer.outputs.detected == 1
      run: |
        composer_cache_dir="${{ inputs.compose_cache_dir }}"
        if [ -z "$composer_cache_dir" ] || [ ! -d "$composer_cache_dir" ]; then
          composer_cache_dir=$(composer config cache-files-dir)
        fi
        echo "Composer cache dir: $composer_cache_dir"
        echo "path=$composer_cache_dir" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      if: steps.composer.outputs.detected == 1 && steps.composer_cache_dir.outputs.path
      id: cache-composer
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer_cache_dir.outputs.path }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-composer-${{ hashFiles(format('{0}/{1}', inputs.working_directory, inputs.composer_lock), format('{0}/{1}', inputs.working_directory, 'composer.json')) }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.cache_key}}-composer-

    - name: Install/Update Composer dependencies
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: steps.composer.outputs.detected == 1 && inputs.composer_cmd != ''
      run: |
        rm -f auth.json
        composer config --auth github-oauth.github.com ${{ inputs.access_token }}
        echo "Installing dependencies via Composer using command: ${{ steps.vars.outputs.composer_cmd }}"
        if [[ "${{ inputs.composer_lock }}" != "composer.lock" ]]; then
          mv composer.lock composer.lock_
          cp ${{ inputs.composer_lock }} composer.lock
        fi
        
        ${{ steps.vars.outputs.composer_cmd }}
        
        if [[ "${{ inputs.composer_lock }}" != "composer.lock" ]]; then
          rm composer.lock
          mv composer.lock_ composer.lock
        fi
        rm -f auth.json

    - name: Check if we have NPM or Yarn to install
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      id: npm_yarn
      if: inputs.skip_npm_yarn != 'true'
      run: |
        if [[ -f "package.json" ]]; then
          if [ -f ".yarnrc" ]; then
            echo "yarn=1" >> $GITHUB_OUTPUT
            echo "Yarn found"
          else 
            echo "npm=1" >> $GITHUB_OUTPUT
            echo "NPM found"
          fi
        else
          echo "No NPM/Yarn found, skipping JS/TS-related QA."
        fi

    - name: Prepare .npmrc file
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: steps.npm_yarn.outputs.npm == 1 || steps.npm_yarn.outputs.yarn == 1
      run: |
        rm -f .npmrc
        echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ inputs.access_token }}" >> .npmrc

    - name: Get NPM cache directory
      shell: bash
      id: npm_cache_dir
      if: steps.npm_yarn.outputs.npm == 1
      run: |
        npm_cache_dir="${{ inputs.npm_cache_dir }}"
        if [ -z "$npm_cache_dir" ] || [ ! -d "$npm_cache_dir" ]; then
          npm_cache_dir=$(npm config get cache)
        fi
        echo "path=$npm_cache_dir" >> $GITHUB_OUTPUT
        echo "NPM cache dir: $npm_cache_dir"

    - name: NPM cache
      if: steps.npm_yarn.outputs.npm == 1 && steps.npm_cache_dir.outputs.path
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm_cache_dir.outputs.path }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-npm-${{ hashFiles(format('{0}/{1}', inputs.working_directory, 'package-lock.json'), format('{0}/{1}', inputs.working_directory, 'package.json')) }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install NPM dependencies
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: steps.npm_yarn.outputs.npm == 1
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token }}
      run: |
        echo "Installing dependencies via NPM using command: ${{ steps.vars.outputs.npm_install_cmd }}"
        ${{ steps.vars.outputs.npm_install_cmd }}

    - name: Get Yarn cache directory
      shell: bash
      id: yarn_cache_dir
      if: steps.npm_yarn.outputs.yarn == 1
      run: |
        yarn_cache_dir="${{ inputs.yarn_cache_dir }}"
        if [ -z "$yarn_cache_dir" ] || [ ! -d "$yarn_cache_dir" ]; then
          yarn_cache_dir=$(yarn cache dir)
        fi
        echo "path=$yarn_cache_dir" >> $GITHUB_OUTPUT
        echo "Yarn cache dir: $yarn_cache_dir"

    - name: Yarn cache
      if: steps.npm_yarn.outputs.yarn == 1 && steps.yarn_cache_dir.outputs.path
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn_cache_dir.outputs.path }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-yarn-${{ hashFiles(format('{0}/{1}', inputs.working_directory, 'yarn.lock'), format('{0}/{1}', inputs.working_directory, 'package.json')) }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Yarn dependencies
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: steps.npm_yarn.outputs.yarn == 1
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token }}
      run: |
        # This is a hack because otherwise Yarn can't just download private packages =/
        if [ -f "yarn.lock" ]; then
          rm yarn.lock
        fi
        echo "Installing dependencies via Yarn using command: ${{ steps.vars.outputs.yarn_install_cmd }}"
        ${{ steps.vars.outputs.yarn_install_cmd }}

    - name: Remove .npmrc file
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: steps.npm_yarn.outputs.npm == 1 || steps.npm_yarn.outputs.yarn == 1
      run: |
        rm -f .npmrc
