name: Install packages (Composer/Yarn/NPM)

inputs:
  access_token:
    description: 'GitHub access token with the access to read from repositories'
    required: false
  composer_update:
    description: 'Will run `composer update` instead of `composer install` if true'
    required: false
    default: false
  skip_composer:
    description: 'Skip Composer installation'
    required: false
    default: false
  composer_install_cmd:
    description: 'Command to install Composer'
    required: false
    default: "composer install --no-scripts"
  composer_update_cmd:
    description: 'Command to update Composer'
    required: false
    default: "composer update --no-scripts"
  composer_cache_dir:
    description: 'Composer cache directory'
    required: false
    default: false
  skip_npm_yarn:
    description: 'Skip NPM/Yarn installation'
    required: false
    default: false
  npm_cache_dir:
    description: 'NPM cache directory'
    required: false
    default: false
  npm_install_cmd:
    description: 'Command to install NPM'
    required: false
    default: "npm install"
  yarn_cache_dir:
    description: 'Yarn cache directory'
    required: false
    default: false
  yarn_install_cmd:
    description: 'Command to install Yarn'
    required: false
    default: "yarn install --production=false"
  cache_key:
    description: 'Cache key fraction to add to make cache unique'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set up variables
      id: vars
      shell: bash
      run: |
        echo "composer_cache_dir=${{ inputs.composer_cache_dir }}" >> $GITHUB_OUTPUT
        echo "composer_install_cmd=${{ inputs.composer_install_cmd }}" >> $GITHUB_OUTPUT
        echo "npm_install_cmd=${{ inputs.npm_install_cmd }}" >> $GITHUB_OUTPUT
        echo "npm_update_cmd=${{ inputs.npm_update_cmd }}" >> $GITHUB_OUTPUT
        echo "yarn_install_cmd=${{ inputs.yarn_install_cmd }}" >> $GITHUB_OUTPUT

    - name: Check if we have Composer to install
      shell: bash
      id: composer
      if: inputs.skip_composer != true
      run: |
        if [[ -f "composer.json" ]]; then
          echo "detected=1" >> $GITHUB_OUTPUT
        else
          echo "No Composer found, skipping."
        fi

    - name: Get Composer Cache Directory
      shell: bash
      if: steps.composer.outputs.detected == 1 && inputs.compose_cache_dir == false
      run: |
        echo "composer_cache_dir=$(composer config cache-files-dir)" >> $GITHUB_ENV

    - name: Cache Composer dependencies
      if: steps.composer.outputs.detected == 1
      id: cache-composer
      uses: actions/cache@v4
      with:
        path: ${{ steps.vars.outputs.composer_cache_dir }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-composer-${{ hashFiles('composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer dependencies (Composer-locked environment)
      shell: bash
      if: steps.composer.outputs.detected == 1 && inputs.composer_update != true
      run: |
        composer config --auth github-oauth.github.com ${{ inputs.access_token }}
        ${{ steps.vars.outputs.composer_install_cmd }}

    - name: Update Composer dependencies (not Composer-locked environment)
      shell: bash
      if: steps.composer.outputs.detected == 1 && inputs.composer_update == true
      run: |
        composer config --auth github-oauth.github.com ${{ inputs.access_token }}
        ${{ steps.vars.outputs.composer_update_cmd }}

    - name: Check if we have Yarn to install
      shell: bash
      id: npm_yarn
      if: inputs.skip_npm_yarn != true
      run: |
        if [[ -f "package.json" ]]; then
          if [ -f ".yarnrc" ]; then
            echo "yarn=1" >> $GITHUB_OUTPUT
          else 
            echo "npm=1" >> $GITHUB_OUTPUT
          fi
        else
          echo "No NPM/Yarn found, skipping JS/TS-related QA."
        fi

    - name: Prepare .npmrc file
      shell: bash
      if: steps.npm_yarn.outputs.npm == 1 || steps.npm_yarn.outputs.yarn == 1
      run: |
        echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ inputs.access_token }}" >> .npmrc

    - name: Get NPM cache directory
      shell: bash
      id: npm_cache_dir
      if: steps.npm_yarn.outputs.npm == 1
      run: |
        npm_cache_dir="${{ inputs.npm_cache_dir }}"
        if [ ! -d "$npm_cache_dir" ]; then
          npm_cache_dir=$(npm config get cache)
        fi
        echo "path=$npm_cache_dir" >> $GITHUB_ENV

    - name: NPM cache
      if: steps.npm_yarn.outputs.npm == 1
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm_cache_dir.outputs.path }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install NPM dependencies
      shell: bash
      if: steps.npm_yarn.outputs.npm == 1
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token }}
      run: ${{ steps.vars.outputs.npm_install_cmd }}

    - name: Get Yarn cache directory
      shell: bash
      id: yarn_cache_dir
      if: steps.npm_yarn.outputs.yarn == 1
      run: |
        yarn_cache_dir="${{ inputs.yarn_cache_dir }}"
        if [ ! -d "$yarn_cache_dir" ]; then
          yarn_cache_dir=$(yarn cache dir)
        fi
        echo "path=$yarn_cache_dir" >> $GITHUB_ENV

    - name: Yarn cache
      if: steps.npm_yarn.outputs.yarn == 1
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn_cache_dir.outputs.path }}
        key: ${{ runner.os }}-${{ inputs.cache_key}}-yarn-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Yarn dependencies
      shell: bash
      if: steps.npm_yarn.outputs.yarn == 1
      env:
        NODE_AUTH_TOKEN: ${{ inputs.access_token }}
      run: |
        # This is a hack because otherwise Yarn can't just download private packages =/
        if [ -f "yarn.lock" ]; then
          rm yarn.lock
        fi
        
        ${{ steps.vars.outputs.yarn_install_cmd }}
