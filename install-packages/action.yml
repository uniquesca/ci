name: Install packages (Composer/Yarn/NPM)

inputs:
  access_token:
    description: 'GitHub access token with the access to read from repositories'
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if we have Composer to install
      run: |
        if [[ -f "composer.json" ]]; then
          echo "composer=1" >> $GITHUB_ENV
        else
          echo "No Composer found, skipping."
        fi

    - name: Cache Composer dependencies
      if: env.composer == 1
      id: cache-composer
      uses: actions/cache@v4
      with:
        path: |
          vendor
        key: ${{ runner.os }}-${{ matrix.setup.locked }}-composer-ci-${{ hashFiles('composer.json','composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.setup.locked }}-composer-ci-${{ hashFiles('composer.json','composer.lock') }}

    - name: Install Composer dependencies (Composer-locked environment)
      if: env.composer == 1 && steps.cache-composer.outputs.cache-hit != 'true' && matrix.setup.locked == true
      run: |
        composer config --auth github-oauth.github.com ${{ inputs.access_token }}
        composer install --no-scripts

    - name: Update Composer dependencies (not Composer-locked environment)
      if: env.composer == 1 && steps.cache-composer.outputs.cache-hit != 'true' && matrix.setup.locked != true
      run: |
        composer config --auth github-oauth.github.com ${{ inputs.access_token }}
        composer update --no-scripts

    - name: Check if we have NPM/Yarn to install
      run: |
        if [[ -f "package.json" ]]; then
          echo "npm=1" >> $GITHUB_ENV
        else
          echo "No NPM/Yarn found, skipping JS/TS-related QA."
        fi

    - name: Get NPM/Yarn cache directory
      if: env.npm == 1
      id: npm-cache-dir
      shell: bash
      run: |
        if [ -f ".yarnrc" ]; then
          echo "dir=$(yarn cache dir)" >> ${GITHUB_OUTPUT}
        else
          echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
        fi

    - name: Cache NPM/Yarn dependencies
      if: env.npm == 1
      id: cache-npm
      uses: actions/cache@v4
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-npm-ci-${{ hashFiles('package.json','package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-ci-${{ hashFiles('package.json','package-lock.json') }}

    - name: Install NPM/Yarn dependencies
      if: env.npm == 1 && steps.cache-npm.outputs.cache-hit != 'true'
      run: |
        echo "Preparing .npmrc file"
        echo "@uniquesca:registry=https://npm.pkg.github.com/" > .npmrc
        echo "//npm.pkg.github.com/:_authToken=${{ inputs.access_token }}" >> .npmrc
        
        # This is a hack because otherwise Yarn can't just download private packages =/
        if [ -f "yarn.lock" ]; then
          rm yarn.lock
        fi
        
        if [ -f ".yarnrc" ]; then
          yarn install --production=false
        else
          npm install  
        fi